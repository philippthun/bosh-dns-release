// Code generated by counterfeiter. DO NOT EDIT.
package monitoringfakes

import (
	"bosh-dns/dns/server/monitoring"
	"context"
	"sync"

	"github.com/miekg/dns"
)

type FakeMetricsReporter struct {
	ReportStub        func(context.Context, dns.ResponseWriter, *dns.Msg) (int, error)
	reportMutex       sync.RWMutex
	reportArgsForCall []struct {
		arg1 context.Context
		arg2 dns.ResponseWriter
		arg3 *dns.Msg
	}
	reportReturns struct {
		result1 int
		result2 error
	}
	reportReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsReporter) Report(next dns.Handler, arg1 context.Context, arg2 dns.ResponseWriter, arg3 *dns.Msg) (int, error) {
	fake.reportMutex.Lock()
	ret, specificReturn := fake.reportReturnsOnCall[len(fake.reportArgsForCall)]
	fake.reportArgsForCall = append(fake.reportArgsForCall, struct {
		arg1 context.Context
		arg2 dns.ResponseWriter
		arg3 *dns.Msg
	}{arg1, arg2, arg3})
	fake.recordInvocation("Report", []interface{}{arg1, arg2, arg3})
	fake.reportMutex.Unlock()
	if fake.ReportStub != nil {
		return fake.ReportStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.reportReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsReporter) ReportCallCount() int {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	return len(fake.reportArgsForCall)
}

func (fake *FakeMetricsReporter) ReportCalls(stub func(context.Context, dns.ResponseWriter, *dns.Msg) (int, error)) {
	fake.reportMutex.Lock()
	defer fake.reportMutex.Unlock()
	fake.ReportStub = stub
}

func (fake *FakeMetricsReporter) ReportArgsForCall(i int) (context.Context, dns.ResponseWriter, *dns.Msg) {
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	argsForCall := fake.reportArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMetricsReporter) ReportReturns(result1 int, result2 error) {
	fake.reportMutex.Lock()
	defer fake.reportMutex.Unlock()
	fake.ReportStub = nil
	fake.reportReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsReporter) ReportReturnsOnCall(i int, result1 int, result2 error) {
	fake.reportMutex.Lock()
	defer fake.reportMutex.Unlock()
	fake.ReportStub = nil
	if fake.reportReturnsOnCall == nil {
		fake.reportReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.reportReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsReporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reportMutex.RLock()
	defer fake.reportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsReporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitoring.MetricsReporter = new(FakeMetricsReporter)
